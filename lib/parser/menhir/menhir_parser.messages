program: TYPENAME
##
## Ends in an error in state: 0.
##
## program' -> . program [ # ]
##
## The known suffix of the stack is as follows:
##
##

Program should start with a valid directive (.text or .data).

program: DIRECTIVE_TEXT TYPENAME
##
## Ends in an error in state: 1.
##
## directive_block -> DIRECTIVE_TEXT . nonempty_list(instruction_block) [ EOF DIRECTIVE_TEXT DIRECTIVE_DATA ]
##
## The known suffix of the stack is as follows:
## DIRECTIVE_TEXT
##

Expected code block label after directive .text.

program: DIRECTIVE_TEXT LABEL TYPENAME
##
## Ends in an error in state: 2.
##
## instruction_block -> LABEL . nonempty_list(instruction) [ LABEL EOF DIRECTIVE_TEXT DIRECTIVE_DATA ]
##
## The known suffix of the stack is as follows:
## LABEL
##

Expected list of instructions in the code block.

program: DIRECTIVE_TEXT LABEL NAME TYPENAME
##
## Ends in an error in state: 3.
##
## instruction -> NAME . loption(separated_nonempty_list(COMMA,argument)) [ NAME LABEL EOF DIRECTIVE_TEXT DIRECTIVE_DATA ]
##
## The known suffix of the stack is as follows:
## NAME
##

Expected argument or next instruction.

program: DIRECTIVE_TEXT LABEL NAME NAME_REF TYPENAME
##
## Ends in an error in state: 9.
##
## separated_nonempty_list(COMMA,argument) -> argument . [ NAME LABEL EOF DIRECTIVE_TEXT DIRECTIVE_DATA ]
## separated_nonempty_list(COMMA,argument) -> argument . COMMA separated_nonempty_list(COMMA,argument) [ NAME LABEL EOF DIRECTIVE_TEXT DIRECTIVE_DATA ]
##
## The known suffix of the stack is as follows:
## argument
##

Expected argument or next instruction.

program: DIRECTIVE_TEXT LABEL NAME NAME_REF COMMA TYPENAME
##
## Ends in an error in state: 10.
##
## separated_nonempty_list(COMMA,argument) -> argument COMMA . separated_nonempty_list(COMMA,argument) [ NAME LABEL EOF DIRECTIVE_TEXT DIRECTIVE_DATA ]
##
## The known suffix of the stack is as follows:
## argument COMMA
##

Invalid argument passed to instruction.

program: DIRECTIVE_DATA TYPENAME
##
## Ends in an error in state: 18.
##
## directive_block -> DIRECTIVE_DATA . nonempty_list(value_definition) [ EOF DIRECTIVE_TEXT DIRECTIVE_DATA ]
##
## The known suffix of the stack is as follows:
## DIRECTIVE_DATA
##

Expected code block label after directive .data.

program: DIRECTIVE_DATA LABEL REGISTER
##
## Ends in an error in state: 19.
##
## value_definition -> LABEL . TYPENAME separated_nonempty_list(COMMA,value) [ LABEL EOF DIRECTIVE_TEXT DIRECTIVE_DATA ]
##
## The known suffix of the stack is as follows:
## LABEL
##

Data label should be followed by a type.

program: DIRECTIVE_DATA LABEL TYPENAME TYPENAME
##
## Ends in an error in state: 20.
##
## value_definition -> LABEL TYPENAME . separated_nonempty_list(COMMA,value) [ LABEL EOF DIRECTIVE_TEXT DIRECTIVE_DATA ]
##
## The known suffix of the stack is as follows:
## LABEL TYPENAME
##

Expected value after type declaration.

program: DIRECTIVE_DATA LABEL TYPENAME NUMBER TYPENAME
##
## Ends in an error in state: 22.
##
## separated_nonempty_list(COMMA,value) -> value . [ LABEL EOF DIRECTIVE_TEXT DIRECTIVE_DATA ]
## separated_nonempty_list(COMMA,value) -> value . COMMA separated_nonempty_list(COMMA,value) [ LABEL EOF DIRECTIVE_TEXT DIRECTIVE_DATA ]
##
## The known suffix of the stack is as follows:
## value
##

Unexpected token following value definition.

program: DIRECTIVE_DATA LABEL TYPENAME NUMBER COMMA TYPENAME
##
## Ends in an error in state: 23.
##
## separated_nonempty_list(COMMA,value) -> value COMMA . separated_nonempty_list(COMMA,value) [ LABEL EOF DIRECTIVE_TEXT DIRECTIVE_DATA ]
##
## The known suffix of the stack is as follows:
## value COMMA
##

Expected another value after comma.
